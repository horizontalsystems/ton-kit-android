/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models

/**
 * 
 * @param type 
 * @param status 
 * @param tonTransfer 
 * @param contractDeploy 
 * @param jettonTransfer 
 * @param jettonBurn 
 * @param jettonMint 
 * @param nftItemTransfer 
 * @param subscribe 
 * @param unSubscribe 
 * @param auctionBid 
 * @param nftPurchase 
 * @param depositStake 
 * @param withdrawStake 
 * @param withdrawStakeRequest 
 * @param electionsDepositStake 
 * @param electionsRecoverStake 
 * @param jettonSwap 
 * @param smartContractExec 
 * @param domainRenew 
 * @param inscriptionTransfer 
 * @param inscriptionMint 
 * @param simplePreview 
 * @param baseTransactions 
 */
data class Action (

    val type: Type,
    val status: Status,
    val tonTransfer: TonTransferAction? = null,
    val contractDeploy: ContractDeployAction? = null,
    val jettonTransfer: JettonTransferAction? = null,
    val jettonBurn: JettonBurnAction? = null,
    val jettonMint: JettonMintAction? = null,
    val nftItemTransfer: NftItemTransferAction? = null,
    val subscribe: SubscriptionAction? = null,
    val unSubscribe: UnSubscriptionAction? = null,
    val auctionBid: AuctionBidAction? = null,
    val nftPurchase: NftPurchaseAction? = null,
    val depositStake: DepositStakeAction? = null,
    val withdrawStake: WithdrawStakeAction? = null,
    val withdrawStakeRequest: WithdrawStakeRequestAction? = null,
    val electionsDepositStake: ElectionsDepositStakeAction? = null,
    val electionsRecoverStake: ElectionsRecoverStakeAction? = null,
    val jettonSwap: JettonSwapAction? = null,
    val smartContractExec: SmartContractAction? = null,
    val domainRenew: DomainRenewAction? = null,
    val inscriptionTransfer: InscriptionTransferAction? = null,
    val inscriptionMint: InscriptionMintAction? = null,
    val simplePreview: ActionSimplePreview,
    val baseTransactions: kotlin.Array<kotlin.String>
) {
    /**
    * 
    * Values: TONTRANSFER,JETTONTRANSFER,JETTONBURN,JETTONMINT,NFTITEMTRANSFER,CONTRACTDEPLOY,SUBSCRIBE,UNSUBSCRIBE,AUCTIONBID,NFTPURCHASE,DEPOSITSTAKE,WITHDRAWSTAKE,WITHDRAWSTAKEREQUEST,JETTONSWAP,SMARTCONTRACTEXEC,ELECTIONSRECOVERSTAKE,ELECTIONSDEPOSITSTAKE,DOMAINRENEW,INSCRIPTIONTRANSFER,INSCRIPTIONMINT,UNKNOWN
    */
    enum class Type(val value: kotlin.String){
        TONTRANSFER("TonTransfer"),
        JETTONTRANSFER("JettonTransfer"),
        JETTONBURN("JettonBurn"),
        JETTONMINT("JettonMint"),
        NFTITEMTRANSFER("NftItemTransfer"),
        CONTRACTDEPLOY("ContractDeploy"),
        SUBSCRIBE("Subscribe"),
        UNSUBSCRIBE("UnSubscribe"),
        AUCTIONBID("AuctionBid"),
        NFTPURCHASE("NftPurchase"),
        DEPOSITSTAKE("DepositStake"),
        WITHDRAWSTAKE("WithdrawStake"),
        WITHDRAWSTAKEREQUEST("WithdrawStakeRequest"),
        JETTONSWAP("JettonSwap"),
        SMARTCONTRACTEXEC("SmartContractExec"),
        ELECTIONSRECOVERSTAKE("ElectionsRecoverStake"),
        ELECTIONSDEPOSITSTAKE("ElectionsDepositStake"),
        DOMAINRENEW("DomainRenew"),
        INSCRIPTIONTRANSFER("InscriptionTransfer"),
        INSCRIPTIONMINT("InscriptionMint"),
        UNKNOWN("Unknown");
    }
    /**
    * 
    * Values: OK,FAILED
    */
    enum class Status(val value: kotlin.String){
        OK("ok"),
        FAILED("failed");
    }
}