/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.infrastructure.ApiClient
import io.swagger.client.infrastructure.ClientError
import io.swagger.client.infrastructure.ClientException
import io.swagger.client.infrastructure.MultiValueMap
import io.swagger.client.infrastructure.RequestConfig
import io.swagger.client.infrastructure.RequestMethod
import io.swagger.client.infrastructure.ResponseType
import io.swagger.client.infrastructure.ServerError
import io.swagger.client.infrastructure.ServerException
import io.swagger.client.infrastructure.Success
import io.swagger.client.models.InlineResponse20014
import io.swagger.client.models.InlineResponse20015
import io.swagger.client.models.InlineResponse20016
import io.swagger.client.models.InlineResponse20017
import io.swagger.client.models.InlineResponse20018
import io.swagger.client.models.InlineResponse20019
import io.swagger.client.models.InlineResponse20020
import io.swagger.client.models.InlineResponse20021
import io.swagger.client.models.InlineResponse20022
import io.swagger.client.models.InlineResponse20023
import io.swagger.client.models.InlineResponse20024
import io.swagger.client.models.InlineResponse20025
import io.swagger.client.models.InlineResponse20026
import io.swagger.client.models.InlineResponse20027
import io.swagger.client.models.InlineResponse20028
import io.swagger.client.models.InlineResponse20029

class LiteServerApi(basePath: kotlin.String = "https://tonapi.io") : ApiClient(basePath) {

    /**
     * 
     * Get all raw shards info
     * @param blockId block ID: (workchain,shard,seqno,root_hash,file_hash) 
     * @return InlineResponse20023
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllRawShardsInfo(blockId: kotlin.String): InlineResponse20023 {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_all_shards_info/{block_id}".replace("{" + "block_id" + "}", "$blockId")
        )
        val response = request<InlineResponse20023>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20023
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get out msg queue sizes
     * @return InlineResponse20029
     */
    @Suppress("UNCHECKED_CAST")
    fun getOutMsgQueueSizes(): InlineResponse20029 {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_out_msg_queue_sizes"
        )
        val response = request<InlineResponse20029>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20029
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get raw account state
     * @param accountId account ID 
     * @param targetBlock target block: (workchain,shard,seqno,root_hash,file_hash) (optional)
     * @return InlineResponse20021
     */
    @Suppress("UNCHECKED_CAST")
    fun getRawAccountState(accountId: kotlin.String, targetBlock: kotlin.String? = null): InlineResponse20021 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (targetBlock != null) {
                put("target_block", listOf(targetBlock.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_account_state/{account_id}".replace("{" + "account_id" + "}", "$accountId"), query = localVariableQuery
        )
        val response = request<InlineResponse20021>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20021
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get raw block proof
     * @param knownBlock known block: (workchain,shard,seqno,root_hash,file_hash) 
     * @param mode mode 
     * @param targetBlock target block: (workchain,shard,seqno,root_hash,file_hash) (optional)
     * @return InlineResponse20026
     */
    @Suppress("UNCHECKED_CAST")
    fun getRawBlockProof(knownBlock: kotlin.String, mode: kotlin.Int, targetBlock: kotlin.String? = null): InlineResponse20026 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("known_block", listOf(knownBlock.toString()))
            if (targetBlock != null) {
                put("target_block", listOf(targetBlock.toString()))
            }
            put("mode", listOf(mode.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_block_proof", query = localVariableQuery
        )
        val response = request<InlineResponse20026>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20026
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get raw blockchain block
     * @param blockId block ID: (workchain,shard,seqno,root_hash,file_hash) 
     * @return InlineResponse20017
     */
    @Suppress("UNCHECKED_CAST")
    fun getRawBlockchainBlock(blockId: kotlin.String): InlineResponse20017 {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_block/{block_id}".replace("{" + "block_id" + "}", "$blockId")
        )
        val response = request<InlineResponse20017>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20017
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get raw blockchain block header
     * @param blockId block ID: (workchain,shard,seqno,root_hash,file_hash) 
     * @param mode mode 
     * @return InlineResponse20019
     */
    @Suppress("UNCHECKED_CAST")
    fun getRawBlockchainBlockHeader(blockId: kotlin.String, mode: kotlin.Int): InlineResponse20019 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("mode", listOf(mode.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_block_header/{block_id}".replace("{" + "block_id" + "}", "$blockId"), query = localVariableQuery
        )
        val response = request<InlineResponse20019>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20019
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get raw blockchain block state
     * @param blockId block ID: (workchain,shard,seqno,root_hash,file_hash) 
     * @return InlineResponse20018
     */
    @Suppress("UNCHECKED_CAST")
    fun getRawBlockchainBlockState(blockId: kotlin.String): InlineResponse20018 {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_state/{block_id}".replace("{" + "block_id" + "}", "$blockId")
        )
        val response = request<InlineResponse20018>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20018
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get raw config
     * @param blockId block ID: (workchain,shard,seqno,root_hash,file_hash) 
     * @param mode mode 
     * @return InlineResponse20027
     */
    @Suppress("UNCHECKED_CAST")
    fun getRawConfig(blockId: kotlin.String, mode: kotlin.Int): InlineResponse20027 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("mode", listOf(mode.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_config_all/{block_id}".replace("{" + "block_id" + "}", "$blockId"), query = localVariableQuery
        )
        val response = request<InlineResponse20027>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20027
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get raw list block transactions
     * @param blockId block ID: (workchain,shard,seqno,root_hash,file_hash) 
     * @param mode mode 
     * @param count count 
     * @param accountId account ID (optional)
     * @param lt lt (optional)
     * @return InlineResponse20025
     */
    @Suppress("UNCHECKED_CAST")
    fun getRawListBlockTransactions(blockId: kotlin.String, mode: kotlin.Int, count: kotlin.Int, accountId: kotlin.String? = null, lt: kotlin.Long? = null): InlineResponse20025 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("mode", listOf(mode.toString()))
            put("count", listOf(count.toString()))
            if (accountId != null) {
                put("account_id", listOf(accountId.toString()))
            }
            if (lt != null) {
                put("lt", listOf(lt.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/list_block_transactions/{block_id}".replace("{" + "block_id" + "}", "$blockId"), query = localVariableQuery
        )
        val response = request<InlineResponse20025>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20025
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get raw masterchain info
     * @return InlineResponse20014
     */
    @Suppress("UNCHECKED_CAST")
    fun getRawMasterchainInfo(): InlineResponse20014 {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_masterchain_info"
        )
        val response = request<InlineResponse20014>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20014
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get raw masterchain info ext
     * @param mode mode 
     * @return InlineResponse20015
     */
    @Suppress("UNCHECKED_CAST")
    fun getRawMasterchainInfoExt(mode: kotlin.Int): InlineResponse20015 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("mode", listOf(mode.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_masterchain_info_ext", query = localVariableQuery
        )
        val response = request<InlineResponse20015>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20015
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get raw shard block proof
     * @param blockId block ID: (workchain,shard,seqno,root_hash,file_hash) 
     * @return InlineResponse20028
     */
    @Suppress("UNCHECKED_CAST")
    fun getRawShardBlockProof(blockId: kotlin.String): InlineResponse20028 {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_shard_block_proof/{block_id}".replace("{" + "block_id" + "}", "$blockId")
        )
        val response = request<InlineResponse20028>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20028
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get raw shard info
     * @param blockId block ID: (workchain,shard,seqno,root_hash,file_hash) 
     * @param workchain workchain 
     * @param shard shard 
     * @param exact exact 
     * @return InlineResponse20022
     */
    @Suppress("UNCHECKED_CAST")
    fun getRawShardInfo(blockId: kotlin.String, workchain: kotlin.Int, shard: kotlin.Long, exact: kotlin.Boolean): InlineResponse20022 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("workchain", listOf(workchain.toString()))
            put("shard", listOf(shard.toString()))
            put("exact", listOf(exact.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_shard_info/{block_id}".replace("{" + "block_id" + "}", "$blockId"), query = localVariableQuery
        )
        val response = request<InlineResponse20022>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20022
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get raw time
     * @return InlineResponse20016
     */
    @Suppress("UNCHECKED_CAST")
    fun getRawTime(): InlineResponse20016 {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_time"
        )
        val response = request<InlineResponse20016>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20016
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get raw transactions
     * @param accountId account ID 
     * @param count count 
     * @param lt lt 
     * @param hash hash 
     * @return InlineResponse20024
     */
    @Suppress("UNCHECKED_CAST")
    fun getRawTransactions(accountId: kotlin.String, count: kotlin.Int, lt: kotlin.Long, hash: kotlin.String): InlineResponse20024 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("count", listOf(count.toString()))
            put("lt", listOf(lt.toString()))
            put("hash", listOf(hash.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/liteserver/get_transactions/{account_id}".replace("{" + "account_id" + "}", "$accountId"), query = localVariableQuery
        )
        val response = request<InlineResponse20024>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20024
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Send raw message to blockchain
     * @param body Data that is expected 
     * @return InlineResponse20020
     */
    @Suppress("UNCHECKED_CAST")
    fun sendRawMessage(body: kotlin.Any): InlineResponse20020 {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/v2/liteserver/send_message"
        )
        val response = request<InlineResponse20020>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20020
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
