/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.infrastructure.ApiClient
import io.swagger.client.infrastructure.ClientError
import io.swagger.client.infrastructure.ClientException
import io.swagger.client.infrastructure.RequestConfig
import io.swagger.client.infrastructure.RequestMethod
import io.swagger.client.infrastructure.ResponseType
import io.swagger.client.infrastructure.ServerError
import io.swagger.client.infrastructure.ServerException
import io.swagger.client.infrastructure.Success
import io.swagger.client.models.Accounts
import io.swagger.client.models.InlineResponse20012
import io.swagger.client.models.InlineResponse20013
import io.swagger.client.models.MessageConsequences
import io.swagger.client.models.Seqno

class WalletApi(basePath: kotlin.String = "https://tonapi.io") : ApiClient(basePath) {

    /**
     * 
     * Emulate sending message to blockchain
     * @param body bag-of-cells serialized to base64/hex and additional parameters to configure emulation 
     * @param acceptLanguage  (optional, default to en)
     * @return MessageConsequences
     */
    @Suppress("UNCHECKED_CAST")
    fun emulateMessageToWallet(body: kotlin.Any, acceptLanguage: kotlin.String? = null): MessageConsequences {
        val localVariableBody: kotlin.Any? = body
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply {
            localVariableHeaders["Accept-Language"] = this.toString()
        }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/v2/wallet/emulate", headers = localVariableHeaders
        )
        val response = request<MessageConsequences>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MessageConsequences
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get account seqno
     * @param accountId account ID 
     * @return Seqno
     */
    @Suppress("UNCHECKED_CAST")
    fun getAccountSeqno(accountId: kotlin.String): Seqno {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/wallet/{account_id}/seqno".replace("{" + "account_id" + "}", "$accountId")
        )
        val response = request<Seqno>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Seqno
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get backup info
     * @param xTonConnectAuth  
     * @return InlineResponse20012
     */
    @Suppress("UNCHECKED_CAST")
    fun getWalletBackup(xTonConnectAuth: kotlin.String): InlineResponse20012 {
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xTonConnectAuth.apply {
            localVariableHeaders["X-TonConnect-Auth"] = this.toString()
        }
        localVariableHeaders["Accept"] = "application/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/wallet/backup", headers = localVariableHeaders
        )
        val response = request<InlineResponse20012>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20012
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get wallets by public key
     * @param publicKey  
     * @return Accounts
     */
    @Suppress("UNCHECKED_CAST")
    fun getWalletsByPublicKey(publicKey: kotlin.String): Accounts {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/pubkeys/{public_key}/wallets".replace("{" + "public_key" + "}", "$publicKey")
        )
        val response = request<Accounts>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Accounts
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Set backup info
     * @param body Information for saving backup 
     * @param xTonConnectAuth  
     * @return void
     */
    fun setWalletBackup(body: Object, xTonConnectAuth: kotlin.String): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xTonConnectAuth.apply {
            localVariableHeaders["X-TonConnect-Auth"] = this.toString()
        }
        localVariableHeaders["Content-Type"] = "application/octet-stream"
        localVariableHeaders["Accept"] = "application/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/v2/wallet/backup", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Account verification and token issuance
     * @param body Data that is expected from TON Connect 
     * @return InlineResponse20013
     */
    @Suppress("UNCHECKED_CAST")
    fun tonConnectProof(body: kotlin.Any): InlineResponse20013 {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/v2/wallet/auth/proof"
        )
        val response = request<InlineResponse20013>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20013
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
