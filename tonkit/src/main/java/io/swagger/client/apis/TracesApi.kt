/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.infrastructure.ApiClient
import io.swagger.client.infrastructure.ClientError
import io.swagger.client.infrastructure.ClientException
import io.swagger.client.infrastructure.MultiValueMap
import io.swagger.client.infrastructure.RequestConfig
import io.swagger.client.infrastructure.RequestMethod
import io.swagger.client.infrastructure.ResponseType
import io.swagger.client.infrastructure.ServerError
import io.swagger.client.infrastructure.ServerException
import io.swagger.client.infrastructure.Success
import io.swagger.client.models.Trace

class TracesApi(basePath: kotlin.String = "https://tonapi.io") : ApiClient(basePath) {

    /**
     * 
     * Emulate sending message to blockchain
     * @param body bag-of-cells serialized to hex 
     * @param ignoreSignatureCheck  (optional)
     * @return Trace
     */
    @Suppress("UNCHECKED_CAST")
    fun emulateMessageToTrace(body: kotlin.Any, ignoreSignatureCheck: kotlin.Boolean? = null): Trace {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (ignoreSignatureCheck != null) {
                put("ignore_signature_check", listOf(ignoreSignatureCheck.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/v2/traces/emulate", query = localVariableQuery
        )
        val response = request<Trace>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Trace
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get the trace by trace ID or hash of any transaction in trace
     * @param traceId trace ID or transaction hash in hex (without 0x) or base64url format 
     * @return Trace
     */
    @Suppress("UNCHECKED_CAST")
    fun getTrace(traceId: kotlin.String): Trace {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/traces/{trace_id}".replace("{" + "trace_id" + "}", "$traceId")
        )
        val response = request<Trace>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Trace
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
