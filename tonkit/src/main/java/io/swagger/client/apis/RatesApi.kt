/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.infrastructure.ApiClient
import io.swagger.client.infrastructure.ClientError
import io.swagger.client.infrastructure.ClientException
import io.swagger.client.infrastructure.MultiValueMap
import io.swagger.client.infrastructure.RequestConfig
import io.swagger.client.infrastructure.RequestMethod
import io.swagger.client.infrastructure.ResponseType
import io.swagger.client.infrastructure.ServerError
import io.swagger.client.infrastructure.ServerException
import io.swagger.client.infrastructure.Success
import io.swagger.client.infrastructure.toMultiValue
import io.swagger.client.models.InlineResponse20010
import io.swagger.client.models.InlineResponse2008
import io.swagger.client.models.InlineResponse2009

class RatesApi(basePath: kotlin.String = "https://tonapi.io") : ApiClient(basePath) {

    /**
     * 
     * Get chart by token
     * @param token accept jetton master address 
     * @param currency  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param pointsCount  (optional, default to 200)
     * @return InlineResponse2009
     */
    @Suppress("UNCHECKED_CAST")
    fun getChartRates(token: kotlin.String, currency: kotlin.String? = null, startDate: kotlin.Long? = null, endDate: kotlin.Long? = null, pointsCount: kotlin.Int? = null): InlineResponse2009 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("token", listOf(token.toString()))
            if (currency != null) {
                put("currency", listOf(currency.toString()))
            }
            if (startDate != null) {
                put("start_date", listOf(startDate.toString()))
            }
            if (endDate != null) {
                put("end_date", listOf(endDate.toString()))
            }
            if (pointsCount != null) {
                put("points_count", listOf(pointsCount.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/rates/chart", query = localVariableQuery
        )
        val response = request<InlineResponse2009>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2009
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get the TON price from markets
     * @return InlineResponse20010
     */
    @Suppress("UNCHECKED_CAST")
    fun getMarketsRates(): InlineResponse20010 {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/rates/markets"
        )
        val response = request<InlineResponse20010>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20010
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Get the token price in the chosen currency for display only. Donâ€™t use this for financial transactions.
     * @param tokens accept ton and jetton master addresses, separated by commas 
     * @param currencies accept ton and all possible fiat currencies, separated by commas 
     * @return InlineResponse2008
     */
    @Suppress("UNCHECKED_CAST")
    fun getRates(tokens: kotlin.Array<kotlin.String>, currencies: kotlin.Array<kotlin.String>): InlineResponse2008 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("tokens", toMultiValue(tokens.toList(), "csv"))
            put("currencies", toMultiValue(currencies.toList(), "csv"))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v2/rates", query = localVariableQuery
        )
        val response = request<InlineResponse2008>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
